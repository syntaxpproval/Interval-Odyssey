#include <gb/gb.h>
#include <gb/hardware.h>
#include <stdint.h>
#include <string.h>
#include <rand.h>
#include <stdio.h>
#include <gbdk/console.h>
#include "room_manager.h"
#include "tileset.h"
#include "settings.h"
#include "room_templates.h"
#include "player.h"
#include "sound.h"
#include "item_manager.h"
#include "map_view.h"
#include "transition.h"
#include "quiz_mode.h"
#include "game_state.h"
#include "game_types.h"
#include "text.h"
#include "sequencer.h"  // Add our new header

typedef enum {
    STATE_MENU,
    STATE_GAME,
    STATE_SETTINGS,
    STATE_MUSIC,
    STATE_SEQUENCER  // Add new state for sequencer
} GameState;

GameState current_state = STATE_MENU;
UINT8 menu_selection = 0;
UINT8 needs_redraw = 1;

// ... [Previous settings and variables remain the same] ...

void update_game_state(UINT8 joy) {
    static UINT8 first_update = 1;
    
    if (first_update) {
        char debug[32];
        sprintf(debug, "INIT>%02x,%02x", rand_1, rand_2);
        draw_text(0, 11, debug);
        first_update = 0;
    }
    
    switch(current_state) {
        case STATE_MENU:
            if(needs_redraw) {
                draw_menu_screen();
                needs_redraw = 0;
            }
            handle_menu_input(joy);
            break;
            
        case STATE_GAME:
            if (should_start_quiz()) {
                gate_delay = 30;
                draw_text(0, 8, "Gate Delay");
                return;
            }
            update_player_position();
            update_key_gate();
            log_debug_info();
            break;
            
        case STATE_SETTINGS:
            if(needs_redraw) {
                draw_settings_screen();
                needs_redraw = 0;
            }
            handle_settings_input(joy);
            break;
            
        case STATE_MUSIC:
            current_state = STATE_SEQUENCER;  // Transition directly to sequencer
            needs_redraw = 1;
            init_sequencer();  // Initialize our sequencer
            break;
            
        case STATE_SEQUENCER:
            if(needs_redraw) {
                draw_sequencer();
                needs_redraw = 0;
            }
            handle_sequencer_input(joy);
            if(joy & J_B) {  // Handle back button
                current_state = STATE_MENU;
                needs_redraw = 1;
            }
            break;
    }
}